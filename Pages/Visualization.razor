@page "/visualization"
@using MudBlazor.Charts
@using MudBlazor
@using System;
@using System.Linq;
@using System.Text;
@using System.Threading.Tasks;
@using System.Collections.Generic
@using BlazorInterview.Models
@using BlazorInterview.Services
@inject DataService DataService

<div>
    <p>Line Chart showcasing Industrial PC (IPC) with ID @IpcID</p>
    <p>An IPC is considered underutilized if its average utilization rate is below 50% and its peak utilization rate is below 75%.</p>
    <p>Peak utilization is shown in blue and average utilization is shown in green.</p>
    <div style="margin: 10px;">
        <td>
            <InputSelect id="IPC" @bind-Value="selectedIPC" @onchange="OnIpcSelectionChange">
                @foreach (var ipc in IpcList)
                {
                    <option value="@ipc">@ipc</option>
                }
            </InputSelect>
        </td>
    </div>
    <p>Maximum CPU MHz: @maxCpuMHz</p>
    @* <p>Average Utilization Rate: @averageUtilizationRate.ToString("F2")%</p>
    <p>Peak Utilization Rate: @peakUtilizationRate.ToString("F2")%</p>
    @if (isUnderutilized)
    {
        <p style="color: green;">This IPC is underutilized.</p>
    }
    else
    {
        <p style="color: red;">This IPC is not underutilized.</p>
    } *@
</div>
<div>
    <MudChart ChartType="MudBlazor.ChartType.Line" ChartSeries="@Series" @bind-SelectedIndex="Index" XAxisLabels="@XAxisLabels" Width="100%" Height="350px" ChartOptions="@Options"/>
    <MudGrid>
        <MudItem xs="6">
            <MudSlider @bind-Value="Options.LineStrokeWidth" Min="1" Max="10" Color="Color.Info">Line Width: @Options.LineStrokeWidth.ToString()</MudSlider>
        </MudItem>
    </MudGrid>
</div>

@code {
    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.
    public MudBlazor.ChartOptions Options = new MudBlazor.ChartOptions();
    List<IPCData> listOfIpcData = new List<IPCData>();
    List<IPCData> dataITLT = new List<IPCData>();
    List<ChartSeries> Series = new List<ChartSeries>();
    string[] XAxisLabels = new string[0];
    int[] YAxisLabels = new int[0];
    // create arrays to store utilization rates
    public double[] AvgValue = new double[0];
    public double[] MaxValue = new double[0];
    int maxCpuMHz = 0;
    string IpcID = "";
    List<string> IpcList = new List<string>();
    public string selectedIPC { get; set; }
    string csvFilePath = "sample-data/testcase_smart_applicator_V8.2_020823.zip.csv";

    protected override async Task OnInitializedAsync()
    {
        // load IPC data
        listOfIpcData = await DataService.LoadDataAsync(csvFilePath);
        // extract IPC IDs
        IpcList = listOfIpcData.Select(data => data.IPC).Distinct().ToList();
        // set default IPC
        selectedIPC = IpcList[0];
        // update visualization
        await UpdateVisualizationAsync(selectedIPC);
    }

    private async Task OnIpcSelectionChange(ChangeEventArgs e)
    {
        selectedIPC = e.Value.ToString();
        await UpdateVisualizationAsync(selectedIPC);
    }

    private async Task UpdateVisualizationAsync(string selectedIPC)
    {
        // filter data for selected IPC
        dataITLT = listOfIpcData.Where(data => data.IPC == selectedIPC).ToList();
        // extract average and peak utilization rates
        AvgValue = dataITLT.Select(data => data.AvgValue).ToArray();
        MaxValue = dataITLT.Select(data => data.MaxValue).ToArray();
        maxCpuMHz = dataITLT.Select(data => data.CpuMHz).Max();

        // update chart series
        Series.Clear();
        Series.Add(new ChartSeries { Name = "Average Utilization Rate", Data = AvgValue });
        Series.Add(new ChartSeries { Name = "Peak Utilization Rate", Data = MaxValue });
    }
}
