@page "/visualization"
@using MudBlazor.Charts
@using MudBlazor
@using System.Collections.Generic
@using ItilityInterview.Models
@using ItilityInterview.Services
@inject DataService DataService

<div>
    <MudChart ChartType="MudBlazor.ChartType.Line" ChartSeries="@Series" @bind-SelectedIndex="Index" XAxisLabels="@XAxisLabels" Width="100%" Height="350px" ChartOptions="@Options"/>
</div>

@code {
    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.
    public MudBlazor.ChartOptions Options = new MudBlazor.ChartOptions();
    List<IPCData> listOfIpcData = new List<IPCData>();
    List<IPCData> dataITLT4301 = new List<IPCData>();
    List<ChartSeries> Series = new List<ChartSeries>();
    string[] XAxisLabels = new string[0];
    int[] YAxisLabels = new int[0];

    protected override async Task OnInitializedAsync()
    {
        // load IPC data
        listOfIpcData = await DataService.LoadDataAsync("sample-data/testcase_smart_applicator_V8.2_020823.zip.csv");
        // filter data for ITLT4301 IPC
        dataITLT4301 = listOfIpcData
            .Where(data => data.IPC.Trim().Equals("ITLT4301", StringComparison.OrdinalIgnoreCase))
            .Take(20)
            .ToList();
        // extract max and avg values
        var maxValues = dataITLT4301.Select(data => data.MaxValue).ToArray();
        var avgValues = dataITLT4301.Select(data => data.AvgValue).ToArray();

        // create chart series
        Series = new List<ChartSeries>()
        {
            new ChartSeries() { Name = "MaxValue", Data = maxValues },
            new ChartSeries() { Name = "AvgValue", Data = avgValues },
        };
        // create x-axis labels
        XAxisLabels = dataITLT4301.Select(data => data.Time.ToString("dd")).ToArray();
    }
}
