@page "/pie"
@using MudBlazor
@using MudBlazor.Charts
@using BlazorInterview.Models
@using BlazorInterview.Services
@inject DataService DataService

<PageTitle>Pie Charts</PageTitle>

<h1>Pie Charts</h1>

<div>
    <p style="text-align: justify; width: 100%">
        Pie Chart showcasing Industrial PCs (IPCs) grouped by their Data Factory number.
        <br>The Pie Chart shows the number of underutilized and not underutilized IPCs for each Data Factory.
        <br>An IPC is considered underutilized if its average utilization 
        rate is below @avgThreshold% and its peak utilization rate is below @peakThreshold%.
        <br>Average and peak utilization rates are calculated as a percentage of the IPC's CPU MHz.
    </p>
    <div style="justify-content: center; margin-top: 5px; margin-bottom: 5px;">
        <p>Choose a Data Factory number that you would like to see the chart of:</p>
        <InputSelect id="DataFactory" class="form-control" style="width: 200px" 
            @bind-Value="selectedFactory" 
            @onchange="OnFactorySelectionChange">
                @foreach (var factory in FactoryValues)
                {
                    <option value="@factory">@factory</option>
                }
        </InputSelect>
    </div>
</div>

@if (isLoading)
{
    <h3>Loading...</h3>
}
else{
    @if (data.ContainsKey(selectedFactory))
    {
        var facData = data[selectedFactory];
        <p>
            Data Factory @selectedFactory contains @facData.IpcCount unique IPCs
            <br>Out of which @facData.UnderutilizedCount are underutilized and @facData.NotUnderutilizedCount are not underutilized.
        </p>
        <MudPaper Class="pa-4 mt-2 d-flex justify-center">
            <MudChart ChartType="ChartType.Pie" InputData="@facData.Data"
                @bind-SelectedIndex="Index" InputLabels="@labels" Width="300px" Height="300px" />
        </MudPaper>
        <MudText Typo="Typo.h6">Selected portion of the chart: 
            @(Index >= 0 && Index < labels.Length ? labels[Index] : "None") 
        </MudText>
    }

    <div class="container mt-3 mb-3">    
        <h3>Distribution of Underutilized IPCs per Data Factory</h3>
        <MudPaper Class="pa-4 mt-2 d-flex justify-center">
            <MudChart ChartType="ChartType.Pie" InputData="@data2" 
                @bind-SelectedIndex="Index2" InputLabels="@labels2" Width="300px" Height="300px" />
        </MudPaper>
        <MudText Typo="Typo.h6">
            Selected portion of the chart: 
            @(Index2 >= 0 && Index2 < labels2.Length ? $"{labels2[Index2]}: {data2[Index2] / underutilizedTotal * 100:0.00}%" : "None") 
        </MudText>
    </div>

    <div class="container mt-3 mb-3">
        <h3>Distribution of Utilized IPCs per Data Factory</h3>
        <MudPaper Class="pa-4 mt-2 d-flex justify-center">
            <MudChart ChartType="ChartType.Pie" InputData="@data3"
            @bind-SelectedIndex="Index3" InputLabels="@labels2" Width="300px" Height="300px" />
        </MudPaper>
        <MudText Typo="Typo.h6">
            Selected portion of the chart: 
            @(Index3 >= 0 && Index3 < labels2.Length ? $"{labels2[Index3]}: {data3[Index3] / utilizedTotal * 100:0.00}%" : "None")
        </MudText>
    </div>
}
@code {
    private bool isLoading = true;
    // Variables for data
    private List<IPCData> IpcData = new List<IPCData>();
    private int avgThreshold = 10;
    private int peakThreshold = 20;
    private string csvFilePath = "sample-data/testcase_smart_applicator_V8.2_020823.zip.csv";

    // Variables for pie chart
    private int Index = -1; // Default value cannot be 0 -> first selected index is 0.
    private Dictionary<int, DataClass> data = new Dictionary<int, DataClass>();
    string[] labels = { "Not Underutilized", "Underutilized"};
    private int total = 0;

    // Variables for pie chart Factory Utilization Distribution
    private int Index2 = -1;
    private int Index3 = -1;
    private List<double> underUtilizedPerFactory = new List<double>(); 
    private List<double> utilizedPerFactory = new List<double>();
    private double[] data2 = { 1, 1, 1, 1, 1 };
    private double[] data3 = { 1, 1, 1, 1, 1 };
    private double utilizedTotal = 0;
    private double underutilizedTotal = 0;
    private string[] labels2 = { "Factory 1", "Factory 2", "Factory 3", "Factory 4", "Factory 5" };
    
    // Variables for input select
    private int selectedFactory { get; set; }
    private List<int> FactoryValues = new List<int>();

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        await LoadData();
        isLoading = false;
    }

    private async Task LoadData()
    {
        IpcData = await DataService.LoadDataAsync(csvFilePath);
        // Group data by Data Factory and IPC, calculate averages and take distinct CpuMHz values
        var groupedData = IpcData
            .GroupBy(d => new { d.DataFactory, d.IPC })
            .Select(ipcGroup => new IPCData
            {
                IPC = ipcGroup.Key.IPC,
                DataFactory = ipcGroup.Key.DataFactory,
                AvgValue = ipcGroup.Average(d => d.AvgValue),
                MaxValue = ipcGroup.Average(d => d.MaxValue),
                CpuMHz = ipcGroup.Select(d => d.CpuMHz).FirstOrDefault()
            })
            .ToList();

        // Get unique factory values
        FactoryValues = groupedData.Select(d => d.DataFactory).Distinct().ToList();
        foreach (var factory in FactoryValues)
        {
            LoadPieData(factory);
        }
        // load variables for pie charts Factory Utilization Distribution
        data2 = underUtilizedPerFactory.ToArray();
        data3 = utilizedPerFactory.ToArray();
    }

    private void LoadPieData(int selectedFactory)
    {
        var factoryData = IpcData
            .Where(d => d.DataFactory == selectedFactory)
            .GroupBy(d => d.IPC)
            .Select(ipcGroup => new 
            {
                IPC = ipcGroup.Key,
                AvgValue = ipcGroup.Average(d => d.AvgValue),
                MaxValue = ipcGroup.Average(d => d.MaxValue),
                CpuMHz = ipcGroup.Select(d => d.CpuMHz).FirstOrDefault()
            })
            .ToList();

        var uniqueCPUs = factoryData.Select(d => d.CpuMHz).Distinct().ToList();

        var uniqueIPCs = factoryData.Select(d => d.IPC).Distinct().ToList().Count();
        var underutilized = factoryData.Count(d => d.AvgValue / d.CpuMHz * 100 < avgThreshold && d.MaxValue / d.CpuMHz * 100 < peakThreshold);
        var notUnderutilized = factoryData.Count() - underutilized;
        Console.WriteLine($"Factory: {selectedFactory}, IPCs: {string.Join(", ", uniqueIPCs)}");
        Console.WriteLine($"Not underutilized: {notUnderutilized}, underutilized: {underutilized}");

        // load variables for pie charts Factory Utilization Distribution
        underUtilizedPerFactory.Add(underutilized);
        underutilizedTotal += underutilized;
        utilizedPerFactory.Add(notUnderutilized);
        utilizedTotal += notUnderutilized;
        total = total + (notUnderutilized + underutilized);

        // load data 
        data[selectedFactory] = new DataClass
        {
            Data = new double[] { notUnderutilized, underutilized },
            IpcCount = uniqueIPCs,
            UnderutilizedCount = underutilized,
            NotUnderutilizedCount = notUnderutilized
        };
    }

    private void OnFactorySelectionChange(ChangeEventArgs e)
    {
        selectedFactory = Convert.ToInt32(e.Value);
        LoadPieData(selectedFactory);
        StateHasChanged();
    }

    class DataClass
    {
        public double[] Data { get; set; }
        public int IpcCount { get; set; }
        public int UnderutilizedCount { get; set; }
        public int NotUnderutilizedCount { get; set; }
    }
}
