@page "/line"
@using MudBlazor
@using MudBlazor.Charts
@using BlazorInterview.Models
@using BlazorInterview.Services
@inject IDataService DataService

<PageTitle>Line Charts</PageTitle>

<div>
    <p>Line Chart showcasing Industrial PC (IPC).
        <br>An IPC is considered underutilized if its average utilization
        rate is below @avgThreshold% and its peak utilization rate is below @peakThreshold%.
        <br>Peak utilization is shown in blue and average utilization is shown in green.
    </p>
    <h3>Line Chart of IPCs grouped by their CpuMHz values.</h3>
</div>
@if (isLoading)
{
    <h3>Loading...</h3>
}
else
{
    <MudPaper Class="pa-3 mt-2 mb-2">
        <p>Choose a CpuMHz value that you would like to see the chart of:</p>
        <InputSelect class="form-control" id="CPU" style="width:150px"
            @bind-Value="selectedCpuMHz"
            @onchange="OnCpuSelectionChange">
                @foreach (var cpu in CpuMHzValues)
                {
                    <option value="@cpu">@cpu</option>
                }
        </InputSelect>
    </MudPaper>
    @if (chartDataByCpuMHz.ContainsKey(selectedCpuMHz))
    {
        var cpuMHzData = chartDataByCpuMHz[selectedCpuMHz];
        <div>
            <div>
                <p>Grouped Data based on Maximum CPU MHz: @selectedCpuMHz (average of values is taken for each day)</p>
                <p>Average Utilization Rate: @cpuMHzData.AverageUtilizationRate%</p>
                <p>Peak Utilization Rate: @cpuMHzData.PeakUtilizationRate%</p>
                @if (cpuMHzData.IsUnderutilized)
                {
                    <p style="color: red;">IPCs sharing Max CpuMHz of @selectedCpuMHz are on average underutilized.</p>
                }
                else
                {
                    <p style="color: green;">IPCs sharing Max CpuMHz of @selectedCpuMHz are on average not underutilized.</p>
                }
            </div>
            <MudPaper Class="pa-4 mt-2 mb-2">
                <MudChart
                    ChartType="MudBlazor.ChartType.Line"
                    ChartSeries="@cpuMHzData.Series"
                    @bind-SelectedIndex="Index"
                    XAxisLabels="@cpuMHzData.XAxisLabels"
                    Width="100%" Height="350"
                    ChartOptions="@Options"/>
            </MudPaper>
        </div>
    }

    <MudPaper Class="pa-3 mt-2 mb-2">
        <h3>Line Chart of IPCs with
            <span style="color: @(highOrLow ? "green" : "red");">
                @(highOrLow ? "Highest" : "Lowest")
            </span> 
            values.
        </h3>
        <h5 style="color: grey;">Use the switch to change between the lowest and highest values.</h5>
        <MudSwitch @bind-Value="@highOrLow" Label="Lowest/ Highest Values" Color="Color.Primary" />
        <p>
            This is a list of IPCs that are considered 
            <span style="color: @(highOrLow ? "green" : "red");">
                @(highOrLow ? "not underutilized" : "underutilized")
            </span>
            based on the average and peak utilization rates.
            <br>The IPCs are selected based on the 
            <span style="color: @(highOrLow ? "green" : "red");">
                @(highOrLow ? "highest" : "lowest")
            </span>
            average and peak utilization rates.
            <br>This is done to show how these IPCs may influence the overall utilization rate.
            <br>Select an IPC that you would like to see the chart of:
        </p>
        <InputSelect class="form-control" id="IPC" style="width:150px"
            @bind-Value="selectedIPC"
            @onchange="OnIPCSelectionChange">
                @foreach (var ipc in (highOrLow ? IpcValuesMax : IpcValuesMin))
                {
                    <option value="@ipc">@ipc</option>
                }
        </InputSelect>
    </MudPaper>

    @if (!string.IsNullOrEmpty(selectedIPC) && chartDataByIPC.ContainsKey(selectedIPC))
    {
        var ipcData = chartDataByIPC[selectedIPC];
        <div>
            <div>
                <p>Data for IPC ID: @selectedIPC
                    <br>Max CPU MHz: @ipcData.CpuMHz
                    <br>Average Utilization Rate: @ipcData.AverageUtilizationRate%
                    <br>Peak Utilization Rate: @ipcData.PeakUtilizationRate%
                    <br>@if (ipcData.IsUnderutilized)
                    {
                        <span style="color: red;">This IPC is underutilized.</span>
                    }
                    else
                    {
                        <span style="color: green;">This IPC is not underutilized.</span>
                    }
                </p>
                <MudPaper Class="pa-4 mt-2 mb-2">
                    <MudChart
                        ChartType="MudBlazor.ChartType.Line"
                        ChartSeries="@ipcData.Series"
                        @bind-SelectedIndex="Index"
                        XAxisLabels="@ipcData.XAxisLabels"
                        Width="100%" Height="350"
                        ChartOptions="@Options"/>
                </MudPaper>
            </div>
        </div>
    }
}

<FactoryLine/>

@code {
    private bool isLoading = true;
    private bool highOrLow = false;
    // variables for line chart
    private List<ChartSeries> Series = new List<ChartSeries>();
    private string[] XAxisLabels = Array.Empty<string>();
    private int Index = -1;
    private ChartOptions Options = new ChartOptions();
    private Dictionary<int, ChartData> chartDataByCpuMHz = new Dictionary<int, ChartData>();
    private Dictionary<string, ChartData> chartDataByIPC = new Dictionary<string, ChartData>();

    // variables for data
    private string csvFilePath = "sample-data/testcase_smart_applicator_V8.2_020823.zip.csv";
    private List<IPCData> IPCData = new List<IPCData>();
    private int peakThreshold = 20;
    private int avgThreshold = 10;
    private int maxValueThreshold = 60;

    // variables for input select
    public int selectedCpuMHz { get; set; }
    private List<int> CpuMHzValues = new List<int>();
    public string selectedIPC { get; set; } = string.Empty;
    private List<string> IpcValues = new List<string>();
    private List<string> IpcValuesMin = new List<string>();
    private List<string> IpcValuesMax = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        await LoadData();
        isLoading = false;
    }

    // Load data from the CSV file
    private async Task LoadData()
    {
        IPCData = await DataService.LoadDataAsync(csvFilePath);
        // Group data by value of CPU MHz, then by date, and take averages of avg and max Values for each day
        var groupedDataCpu = IPCData
            .GroupBy(d => d.CpuMHz)
            .SelectMany(cpuGroup =>
                cpuGroup.GroupBy(g => g.Time.Date)
                    .Select(dateGroup => new IPCData
                    {
                        Time = dateGroup.Key,
                        IPC = dateGroup.First().IPC,
                        AvgValue = dateGroup.Average(d => d.AvgValue),
                        MaxValue = dateGroup.Average(d => d.MaxValue),
                        CpuMHz = cpuGroup.Key
                    })
            )
            .ToList();

        // Group data by IPC, then take averages of avg and max values for each IPC
        var groupedDataIpc = IPCData
            .GroupBy(d => d.IPC)
            .Select(ipcGroup => new IPCData
                {
                    IPC = ipcGroup.Key,
                    AvgValue = ipcGroup.Average(d => d.AvgValue),
                    MaxValue = ipcGroup.Average(d => d.MaxValue),
                    CpuMHz = ipcGroup.Select(d => d.CpuMHz).FirstOrDefault()
                })
            .ToList();

        CpuMHzValues = IPCData.Select(d => d.CpuMHz).Distinct().ToList();
        // Select the first 30 IPCs with the lowest average AvgValue and MaxValue
        IpcValuesMin = groupedDataIpc
            .OrderBy(ipc => ipc.AvgValue)
            .ThenBy(ipc => ipc.MaxValue)
            .Take(30)
            .Select(ipc => ipc.IPC)
            .ToList();
        IpcValuesMax = groupedDataIpc
            .OrderByDescending(ipc => ipc.AvgValue)
            .ThenByDescending(ipc => ipc.MaxValue)
            .Take(30)
            .Select(ipc => ipc.IPC)
            .ToList();

        IpcValues = IpcValuesMin
            .Union(IpcValuesMax)
            .Distinct()
            .ToList();

        foreach (var cpuMHz in CpuMHzValues)
        {
            LoadCpuChartData(groupedDataCpu, cpuMHz);
        }
        selectedCpuMHz = CpuMHzValues.FirstOrDefault(); // set initial selected value

        foreach (var ipc in IpcValues)
        {
            LoadIpcChartData(ipc);
        }
        selectedIPC = IpcValues.FirstOrDefault(); // set initial selected value
    }

    // Load data for the selected CPU MHz
    private void LoadCpuChartData(List<IPCData> groupedData, int cpuMHz)
    {
        var dataCpuMhz = groupedData.Where(d => d.CpuMHz == cpuMHz).ToList();
        var maxValues = dataCpuMhz.Select(d => d.MaxValue).ToArray();
        var avgValues = dataCpuMhz.Select(d => d.AvgValue).ToArray();
        var averageUtilizationRate = Math.Round(avgValues.Average() / cpuMHz * 100, 2);
        var peakUtilizationRate = Math.Round(maxValues.Average() / cpuMHz * 100, 2);
        var maxValueRate = Math.Round(maxValues.Max() / cpuMHz * 100, 2);
        var isUnderutilized = averageUtilizationRate < avgThreshold &&
            peakUtilizationRate < peakThreshold && 
            maxValueRate < maxValueThreshold;
        var distinctIPCs = dataCpuMhz.Select(d => d.IPC).Distinct().ToArray();

        var ChartSeries = new List<ChartSeries>
        {
            new ChartSeries { Name = "Peak Utilization", Data = maxValues },
            new ChartSeries { Name = "Average Utilization", Data = avgValues }
        };

        var XAxisLabels = dataCpuMhz
            .Select((d, index) => index % 2 == 0 ? d.Time.ToString("dd") : "")
            .ToArray();

        chartDataByCpuMHz.Add(cpuMHz, new ChartData
        {
            Series = ChartSeries,
            XAxisLabels = XAxisLabels,
            AverageUtilizationRate = averageUtilizationRate,
            PeakUtilizationRate = peakUtilizationRate,
            IsUnderutilized = isUnderutilized
        });
    }

    // Load data for the selected IPC
    private void LoadIpcChartData(string ipcId)
    {
        // Take data for the selected IPC, order by time
        var ipcData = IPCData
            .Where(d => d.IPC.Trim().Equals(ipcId))
            .OrderBy(d => d.Time)
            .ToList();

        // Load values for the selected IPC
        var maxValues = ipcData.Select(d => d.MaxValue).ToArray();
        var avgValues = ipcData.Select(d => d.AvgValue).ToArray();
        var cpuMHz = ipcData.Select(d => d.CpuMHz).FirstOrDefault();
        var avgUtilization = avgValues.Average() / cpuMHz * 100;
        var maxUtilization = maxValues.Average() / cpuMHz * 100;

        // Create chart series and x-axis labels
        var ChartSeries = new List<ChartSeries>
        {
            new ChartSeries { Name = "Peak Utilization", Data = maxValues },
            new ChartSeries { Name = "Average Utilization", Data = avgValues }
        };

        var XAxisLabels = ipcData
            .Select((d, index) => index % 2 == 0 ? d.Time.ToString("dd") : "")
            .ToArray();

        // Add chart data to dictionary
        chartDataByIPC.Add(ipcId, new ChartData
        {
            Series = ChartSeries,
            XAxisLabels = XAxisLabels,
            AverageUtilizationRate = Math.Round(avgUtilization, 2),
            PeakUtilizationRate = Math.Round(maxUtilization, 2),
            IsUnderutilized = avgUtilization < avgThreshold && maxUtilization < peakThreshold,
            CpuMHz = cpuMHz
        });
    }

    // handle selection change event for the CPU input select
    private void OnCpuSelectionChange(ChangeEventArgs e)
    {
        selectedCpuMHz = int.Parse(e.Value.ToString());
        StateHasChanged();
    }

    // handle selection change event for the IPC input select
    private void OnIPCSelectionChange(ChangeEventArgs e)
    {
        selectedIPC = e.Value.ToString();
        StateHasChanged();
    }

    // class to store chart data
    private class ChartData
    {
        public List<ChartSeries> Series { get; set; }
        public string[] XAxisLabels { get; set; }
        public double AverageUtilizationRate { get; set; }
        public double PeakUtilizationRate { get; set; }
        public bool IsUnderutilized { get; set; }
        public int CpuMHz { get; set; }
    }
}
